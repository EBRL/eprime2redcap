#!/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'Scott Burns <scott.s.burns@gmail.com>'
__license__ = 'BSD 3-Clause'

import os
import unittest

import ep2rc

wd = os.path.split(__file__)[0]
print wd

def parse(f):
    with open(f) as fo:
        data = ep2rc.parse_file(f, fo)
    return data

class NFTests(unittest.TestCase):
    """ NF Testing """
    
    def test_MI(self):
        f = os.path.join(wd, 'NF_MI_Test_Test_Pre.txt')
        correct = {'grant': 'NF',
                    'id': 'Test_Test',
					'mi1_pre_m1_cont_acc': '100.000',
					'mi1_pre_m1_cont_accsd': '0.000',
					'mi1_pre_m1_cont_fn': '0',
					'mi1_pre_m1_cont_fp': '0',
					'mi1_pre_m1_cont_omit': '0',
					'mi1_pre_m1_cont_rtavg': '823.292',
					'mi1_pre_m1_cont_rtsd': '98.016',
					'mi1_pre_m1_imag_acc': '100.000',
					'mi1_pre_m1_imag_accsd': '0.000',
					'mi1_pre_m1_imag_fn': '0',
					'mi1_pre_m1_imag_fp': '0',
					'mi1_pre_m1_imag_omit': '0',
					'mi1_pre_m1_imag_rtavg': '995.208',
					'mi1_pre_m1_imag_rtsd': '222.342',
					'mi1_pre_m2_cont_acc': '100.000',
					'mi1_pre_m2_cont_accsd': '0.000',
					'mi1_pre_m2_cont_fn': '0',
					'mi1_pre_m2_cont_fp': '0',
					'mi1_pre_m2_cont_omit': '0',
					'mi1_pre_m2_cont_rtavg': '804.917',
					'mi1_pre_m2_cont_rtsd': '79.943',
					'mi1_pre_m2_imag_acc': '91.667',
					'mi1_pre_m2_imag_accsd': '0.276',
					'mi1_pre_m2_imag_fn': '0',
					'mi1_pre_m2_imag_fp': '2',
					'mi1_pre_m2_imag_omit': '0',
					'mi1_pre_m2_imag_rtavg': '967.227',
					'mi1_pre_m2_imag_rtsd': '187.644',
					'mi1_pre_upload': 'yes'}
        data = parse(f)        
        self.assertEqual(data, correct, "Failed parsing NF MI")
        
    def test_SWR(self):
        f = os.path.join(wd, 'NF_SWR_Test_Test_Pre_ListA.txt')
        correct = {'grant': 'NF',
                    'id': 'Test_Test',
					'swr1_pre_m1_hai_acc': '100.000',
					'swr1_pre_m1_hai_accsd': '0.000',
					'swr1_pre_m1_hai_comit': '0',
					'swr1_pre_m1_hai_omit': '0',
					'swr1_pre_m1_hai_rtavg': '903.500',
					'swr1_pre_m1_hai_rtsd': '203.129',
					'swr1_pre_m1_har_acc': '90.000',
					'swr1_pre_m1_har_accsd': '0.300',
					'swr1_pre_m1_har_comit': '0',
					'swr1_pre_m1_har_omit': '1',
					'swr1_pre_m1_har_rtavg': '834.000',
					'swr1_pre_m1_har_rtsd': '181.275',
					'swr1_pre_m1_hci_acc': '80.000',
					'swr1_pre_m1_hci_accsd': '0.400',
					'swr1_pre_m1_hci_comit': '1',
					'swr1_pre_m1_hci_omit': '1',
					'swr1_pre_m1_hci_rtavg': '1008.000',
					'swr1_pre_m1_hci_rtsd': '234.094',
					'swr1_pre_m1_hcr_acc': '80.000',
					'swr1_pre_m1_hcr_accsd': '0.400',
					'swr1_pre_m1_hcr_comit': '1',
					'swr1_pre_m1_hcr_omit': '1',
					'swr1_pre_m1_hcr_rtavg': '905.500',
					'swr1_pre_m1_hcr_rtsd': '252.108',
					'swr1_pre_m1_nonword_acc': '50.000',
					'swr1_pre_m1_nonword_accsd': '0.500',
					'swr1_pre_m1_nonword_comit': '1',
					'swr1_pre_m1_nonword_omit': '4',
					'swr1_pre_m1_nonword_rtavg': '1153.000',
					'swr1_pre_m1_nonword_rtsd': '159.087',
					'swr1_pre_m1_word_acc': '87.500',
					'swr1_pre_m1_word_accsd': '0.331',
					'swr1_pre_m1_word_comit': '2',
					'swr1_pre_m1_word_omit': '3',
					'swr1_pre_m1_word_rtavg': '909.971',
					'swr1_pre_m1_word_rtsd': '225.808',
					'swr1_pre_m2_hai_acc': '50.000',
					'swr1_pre_m2_hai_accsd': '0.500',
					'swr1_pre_m2_hai_comit': '3',
					'swr1_pre_m2_hai_omit': '2',
					'swr1_pre_m2_hai_rtavg': '886.800',
					'swr1_pre_m2_hai_rtsd': '181.495',
					'swr1_pre_m2_har_acc': '50.000',
					'swr1_pre_m2_har_accsd': '0.500',
					'swr1_pre_m2_har_comit': '3',
					'swr1_pre_m2_har_omit': '2',
					'swr1_pre_m2_har_rtavg': '934.600',
					'swr1_pre_m2_har_rtsd': '245.122',
					'swr1_pre_m2_hci_acc': '60.000',
					'swr1_pre_m2_hci_accsd': '0.490',
					'swr1_pre_m2_hci_comit': '2',
					'swr1_pre_m2_hci_omit': '2',
					'swr1_pre_m2_hci_rtavg': '861.667',
					'swr1_pre_m2_hci_rtsd': '178.815',
					'swr1_pre_m2_hcr_acc': '60.000',
					'swr1_pre_m2_hcr_accsd': '0.490',
					'swr1_pre_m2_hcr_comit': '0',
					'swr1_pre_m2_hcr_omit': '4',
					'swr1_pre_m2_hcr_rtavg': '822.167',
					'swr1_pre_m2_hcr_rtsd': '255.906',
					'swr1_pre_m2_nonword_acc': '30.000',
					'swr1_pre_m2_nonword_accsd': '0.458',
					'swr1_pre_m2_nonword_comit': '3',
					'swr1_pre_m2_nonword_omit': '4',
					'swr1_pre_m2_nonword_rtavg': '1139.333',
					'swr1_pre_m2_nonword_rtsd': '226.863',
					'swr1_pre_m2_word_acc': '55.000',
					'swr1_pre_m2_word_accsd': '0.497',
					'swr1_pre_m2_word_comit': '8',
					'swr1_pre_m2_word_omit': '10',
					'swr1_pre_m2_word_rtavg': '873.182',
					'swr1_pre_m2_word_rtsd': '222.190',
					'swr1_pre_upload': 'yes'}
        data = parse(f)        
        self.assertEqual(data, correct, "Failed parsing NF SWR")
    
    def test_PIC(self):
        f = os.path.join(wd, 'NF_PIC_Test_Test_Post_ListA.txt')
        correct = {'grant': 'NF',
                    'id': 'Test_Test',
					'pic1_post_m1_con_acc': '75.000',
					'pic1_post_m1_con_accsd': '0.433',
					'pic1_post_m1_con_comit': '1',
					'pic1_post_m1_con_omit': '4',
					'pic1_post_m1_con_rtavg': '914.533',
					'pic1_post_m1_con_rtsd': '258.595',
					'pic1_post_m1_match_acc': '80.000',
					'pic1_post_m1_match_accsd': '0.400',
					'pic1_post_m1_match_comit': '2',
					'pic1_post_m1_match_omit': '1',
					'pic1_post_m1_match_rtavg': '918.667',
					'pic1_post_m1_match_rtsd': '180.152',
					'pic1_post_m1_psw_acc': '80.000',
					'pic1_post_m1_psw_accsd': '0.400',
					'pic1_post_m1_psw_comit': '0',
					'pic1_post_m1_psw_omit': '4',
					'pic1_post_m1_psw_rtavg': '841.938',
					'pic1_post_m1_psw_rtsd': '217.583',
					'pic1_post_m1_wrd_acc': '90.000',
					'pic1_post_m1_wrd_accsd': '0.300',
					'pic1_post_m1_wrd_comit': '0',
					'pic1_post_m1_wrd_omit': '2',
					'pic1_post_m1_wrd_rtavg': '1035.444',
					'pic1_post_m1_wrd_rtsd': '308.208',
					'pic1_post_m2_con_acc': '80.000',
					'pic1_post_m2_con_accsd': '0.400',
					'pic1_post_m2_con_comit': '0',
					'pic1_post_m2_con_omit': '4',
					'pic1_post_m2_con_rtavg': '864.375',
					'pic1_post_m2_con_rtsd': '252.876',
					'pic1_post_m2_match_acc': '60.000',
					'pic1_post_m2_match_accsd': '0.490',
					'pic1_post_m2_match_comit': '1',
					'pic1_post_m2_match_omit': '5',
					'pic1_post_m2_match_rtavg': '1032.667',
					'pic1_post_m2_match_rtsd': '308.971',
					'pic1_post_m2_psw_acc': '75.000',
					'pic1_post_m2_psw_accsd': '0.433',
					'pic1_post_m2_psw_comit': '1',
					'pic1_post_m2_psw_omit': '4',
					'pic1_post_m2_psw_rtavg': '944.467',
					'pic1_post_m2_psw_rtsd': '245.483',
					'pic1_post_m2_wrd_acc': '70.000',
					'pic1_post_m2_wrd_accsd': '0.458',
					'pic1_post_m2_wrd_comit': '1',
					'pic1_post_m2_wrd_omit': '5',
					'pic1_post_m2_wrd_rtavg': '1032.286',
					'pic1_post_m2_wrd_rtsd': '268.392',
					'pic1_post_upload': 'yes'}
        data = parse(f)        
        self.assertEqual(data, correct, "Failed parsing NF PIC")
    
    def test_REP(self):
        f = os.path.join(wd, 'NF_REP_Test_Test.txt')
        correct = {'grant': 'NF',
                    'id': 'Test_Test',
					'rep1_m1_abs_acc': '93.333',
					'rep1_m1_abs_accsd': '0.249',
					'rep1_m1_abs_comit': '0',
					'rep1_m1_abs_omit': '1',
					'rep1_m1_abs_rtavg': '658.214',
					'rep1_m1_abs_rtsd': '55.606',
					'rep1_m1_conc_acc': '100.000',
					'rep1_m1_conc_accsd': '0.000',
					'rep1_m1_conc_comit': '0',
					'rep1_m1_conc_omit': '0',
					'rep1_m1_conc_rtavg': '684.143',
					'rep1_m1_conc_rtsd': '147.144',
					'rep1_m1_cons_acc': '94.444',
					'rep1_m1_cons_accsd': '0.229',
					'rep1_m1_cons_comit': '1',
					'rep1_m1_cons_omit': '0',
					'rep1_m1_cons_rtavg': '726.765',
					'rep1_m1_cons_rtsd': '149.180',
					'rep1_m1_non_acc': '94.444',
					'rep1_m1_non_accsd': '0.229',
					'rep1_m1_non_comit': '1',
					'rep1_m1_non_omit': '0',
					'rep1_m1_non_rtavg': '823.176',
					'rep1_m1_non_rtsd': '145.454',
					'rep1_m2_abs_acc': '100.000',
					'rep1_m2_abs_accsd': '0.000',
					'rep1_m2_abs_comit': '0',
					'rep1_m2_abs_omit': '0',
					'rep1_m2_abs_rtavg': '715.600',
					'rep1_m2_abs_rtsd': '121.372',
					'rep1_m2_conc_acc': '95.238',
					'rep1_m2_conc_accsd': '0.213',
					'rep1_m2_conc_comit': '0',
					'rep1_m2_conc_omit': '1',
					'rep1_m2_conc_rtavg': '653.150',
					'rep1_m2_conc_rtsd': '131.113',
					'rep1_m2_cons_acc': '100.000',
					'rep1_m2_cons_accsd': '0.000',
					'rep1_m2_cons_comit': '0',
					'rep1_m2_cons_omit': '0',
					'rep1_m2_cons_rtavg': '674.667',
					'rep1_m2_cons_rtsd': '149.149',
					'rep1_m2_non_acc': '100.000',
					'rep1_m2_non_accsd': '0.000',
					'rep1_m2_non_comit': '0',
					'rep1_m2_non_omit': '0',
					'rep1_m2_non_rtavg': '822.389',
					'rep1_m2_non_rtsd': '168.545',
					'rep1_m3_abs_acc': '86.667',
					'rep1_m3_abs_accsd': '0.340',
					'rep1_m3_abs_comit': '0',
					'rep1_m3_abs_omit': '2',
					'rep1_m3_abs_rtavg': '706.769',
					'rep1_m3_abs_rtsd': '164.446',
					'rep1_m3_conc_acc': '100.000',
					'rep1_m3_conc_accsd': '0.000',
					'rep1_m3_conc_comit': '0',
					'rep1_m3_conc_omit': '0',
					'rep1_m3_conc_rtavg': '689.048',
					'rep1_m3_conc_rtsd': '89.770',
					'rep1_m3_cons_acc': '100.000',
					'rep1_m3_cons_accsd': '0.000',
					'rep1_m3_cons_comit': '0',
					'rep1_m3_cons_omit': '0',
					'rep1_m3_cons_rtavg': '697.722',
					'rep1_m3_cons_rtsd': '126.603',
					'rep1_m3_non_acc': '100.000',
					'rep1_m3_non_accsd': '0.000',
					'rep1_m3_non_comit': '0',
					'rep1_m3_non_omit': '0',
					'rep1_m3_non_rtavg': '786.444',
					'rep1_m3_non_rtsd': '130.138',
					'rep1_upload': 'yes'}
        data = parse(f)        
        self.assertEqual(data, correct, "Failed parsing NF REP")


class NFBTests(unittest.TestCase):
    """ NFB Parsing """

    def test_FIG(self):
        f = os.path.join(wd, 'NFB_FIG_212_000000_Pre.txt')
        correct = {'mrt1bmrt': '3607.700',
                    'mrt1bsdrt': '3181.371',
                    'mrt1btc': '9',
                    'mrt1btcp': '45.000',
                    'studyid': '212'}
        data = parse(f)        
        self.assertEqual(data, correct, "Failed parsing NFB FIG")
        
    def test_MI(self):
        f = os.path.join(wd, 'NFB_MI_212_000000_Pre.txt')
        correct = {'mit1mrt': '1701.600',
                    'mit1sdrt': '809.910',
                    'mit1tc': '39',
                    'mit1tcp': '78.000',
                    'mit1tt': '2',
                    'studyid': '212'}
        data = parse(f)
        self.assertEqual(data, correct, "Failed parsing NFB MI")
        
    def test_OLSON(self):
        f = os.path.join(wd, 'NFB_OLSON_212_000000_Pre.txt')
        correct = {'ot1cmrt': '1773.650',
                    'ot1csdrt': '1409.268',
                    'ot1imrt': '1773.650',
                    'ot1isdrt': '1409.268',
                    'ot1tc': '20',
                    'studyid': '212'}
        data = parse(f)
        self.assertEqual(data, correct, "Failed parsing NFB OLSON")

    def test_MR(self):
        f = os.path.join(wd, 'NFB_MR_212_000000_Pre.txt')
        correct = {'mrt1lmrt': '4568.600',
                    'mrt1lsdrt': '1689.976',
                    'mrt1ltc': '18',
                    'mrt1ltcp': '90.000',
                    'studyid': '212'}
        data = parse(f)
        self.assertEqual(data, correct, "Failed parsing NFB MR")

    def test_SENT(self):
        f = os.path.join(wd, 'NFB_SENT_157_000000.txt')
        correct = {'sctoc': '19',
					'sctso10mean': '1540.022',
					'sctso10sd': '474.219',
					'sctso11mean': '1676.846',
					'sctso11sd': '486.824',
					'sctso12mean': '1639.333',
					'sctso12sd': '457.377',
					'sctso1mean': '1560.500',
					'sctso1sd': '129.680',
					'sctso2mean': '1932.417',
					'sctso2sd': '470.967',
					'sctso3mean': '1684.000',
					'sctso3sd': '441.370',
					'sctso4mean': '2129.691',
					'sctso4sd': '1005.250',
					'sctso5mean': '1688.333',
					'sctso5sd': '231.177',
					'sctso6mean': '1630.658',
					'sctso6sd': '639.755',
					'sctso7mean': '1926.083',
					'sctso7sd': '745.401',
					'sctso8mean': '1717.833',
					'sctso8sd': '547.035',
					'sctso9mean': '1779.417',
					'sctso9sd': '389.411',
					'sctsotc': '8',
					'sctss01mrt': '1755.417',
					'sctss01sd': '107.614',
					'sctss02mrt': '1725.583',
					'sctss02sd': '270.288',
					'sctss03mrt': '1920.250',
					'sctss03sd': '266.853',
					'sctss04mrt': '1873.667',
					'sctss04sd': '272.755',
					'sctss05mrt': '1699.167',
					'sctss05sd': '242.364',
					'sctss06mrt': '1805.500',
					'sctss06sd': '382.794',
					'sctss07mrt': '1660.750',
					'sctss07sd': '451.682',
					'sctss08mrt': '1676.022',
					'sctss08sd': '780.089',
					'sctss09mrt': '1734.833',
					'sctss09sd': '323.817',
					'sctss10mrt': '1499.750',
					'sctss10sd': '283.809',
					'sctss11mrt': '1818.417',
					'sctss11sd': '590.310',
					'sctss12mrt': '1686.416',
					'sctss12sd': '751.857',
					'sctsstc': '11',
                    'studyid': '157'}
        data = parse(f)
        self.assertEqual(data, correct, "Failed parsing NFB SENT")

class RCVBTests(unittest.TestCase):
    """ RCVB Testing """
    
    def test_SENT(self):
        f = os.path.join(wd, 'RCVB_SENT_021_105552.txt')
        correct = {'sctss12mrt': '763.087',
					'sctss08mrt': '867.583',
					'sctso7sd': '144.206',
					'sctso12mean': '954.833',
					'sctso2mean': '864.691',
					'sctsstc': '5',
					'sctss02sd': '75.730',
					'sctso9mean': '936.051',
					'sctss11mrt': '771.500',
					'sctss05mrt': '1112.523',
					'sctss12sd': '219.800',
					'sctso11sd': '99.600',
					'sctss03sd': '167.872',
					'sctso5sd': '295.316',
					'sctso8mean': '1010.371',
					'sctss07mrt': '854.250',
					'sctso4mean': '1046.833',
					'sctss08sd': '76.540',
					'sctso3sd': '85.448',
					'participant_id': u'021_105552',
					'sctss10mrt': '970.167',
					'sctso3mean': '981.917',
					'sctso6sd': '127.523',
					'sctso4sd': '140.900',
					'sctss09mrt': '857.083',
					'sctso7mean': '886.209',
					'sctss01mrt': '882.500',
					'sctss07sd': '191.414',
					'sctso5mean': '926.484',
					'sctso8sd': '312.801',
					'sctso10sd': '96.175',
					'sctso9sd': '180.440',
					'sctss11sd': '158.785',
					'sctsotc': '6',
					'sctss09sd': '121.870',
					'sctss02mrt': '883.833',
					'sctso11mean': '834.154',
					'sctss01sd': '141.130',
					'sctss10sd': '386.423',
					'sctss04mrt': '964.966',
					'sctso1sd': '366.493',
					'sctss06mrt': '1116.521',
					'sctso1mean': '999.193',
					'sctso6mean': '1014.000',
					'sctso12sd': '254.278',
					'sctoc': '11',
					'sctss03mrt': '891.925',
					'sctss06sd': '468.530',
					'sctso10mean': '866.070',
					'sctss04sd': '216.950',
					'sctso2sd': '172.522',
					'sctss05sd': '254.004'}
        data = parse(f)
        self.assertEqual(data, correct, "Failed parsing RCVB SENT")

class LDRC1Tests(unittest.TestCase):
    """ LDRC1 Testing """
    
    def test_NBACK(self):
        f = os.path.join(wd, 'LDRC1_NBACK_71001.txt')
        correct = {'grant': 'LDRC1',
 'id': '71001',
 'nback1_all_acc': '53.125',
 'nback1_m1_acc': '50.000',
 'nback1_m1_high_acc': '0.000',
 'nback1_m1_low_acc': '50.000',
 'nback1_m1_repeat_acc': '50.000',
 'nback1_m1_trained_acc': '70.000',
 'nback1_m1_untrained_acc': '80.000',
 'nback1_m2_acc': '53.571',
 'nback1_m2_high_acc': '10.000',
 'nback1_m2_low_acc': '30.000',
 'nback1_m2_repeat_acc': '50.000',
 'nback1_m2_trained_acc': '100.000',
 'nback1_m2_untrained_acc': '80.000',
 'nback1_m3_acc': '57.143',
 'nback1_m3_high_acc': '10.000',
 'nback1_m3_low_acc': '30.000',
 'nback1_m3_repeat_acc': '68.750',
 'nback1_m3_trained_acc': '90.000',
 'nback1_m3_untrained_acc': '80.000',
 'nback1_m4_acc': '51.786',
 'nback1_m4_high_acc': '0.000',
 'nback1_m4_low_acc': '40.000',
 'nback1_m4_repeat_acc': '62.500',
 'nback1_m4_trained_acc': '80.000',
 'nback1_m4_untrained_acc': '70.000',
 'nback1_upload': 'yes'}

        data = parse(f)
        self.assertEqual(data,  correct, "Failed parsing LDRC1 SENT")
    
    def test_SENT(self):
        f = os.path.join(wd, 'LDRC1_SENT_71002.txt')
        correct = {'grant': 'LDRC1',
 'id': '71002',
 'sent1_all_all_acc': '46.309',
 'sent1_all_all_comit': '28',
 'sent1_all_all_corr_rtavg': '1485.797',
 'sent1_all_all_corr_rtsd': '515.740',
 'sent1_all_all_omit': '52',
 'sent1_all_all_tot': '149',
 'sent1_all_pseudo_acc': '60.000',
 'sent1_all_pseudo_comit': '5',
 'sent1_all_pseudo_corr_rtavg': '1575.000',
 'sent1_all_pseudo_corr_rtsd': '363.531',
 'sent1_all_pseudo_omit': '1',
 'sent1_all_pseudo_tot': '15',
 'sent1_all_realword_acc': '46.667',
 'sent1_all_realword_comit': '2',
 'sent1_all_realword_corr_rtavg': '1682.000',
 'sent1_all_realword_corr_rtsd': '436.049',
 'sent1_all_realword_omit': '6',
 'sent1_all_realword_tot': '15',
 'sent1_all_semantic_acc': '26.667',
 'sent1_all_semantic_comit': '4',
 'sent1_all_semantic_corr_rtavg': '1375.000',
 'sent1_all_semantic_corr_rtsd': '625.841',
 'sent1_all_semantic_omit': '7',
 'sent1_all_semantic_tot': '15',
 'sent1_all_syntatic_acc': '13.333',
 'sent1_all_syntatic_comit': '6',
 'sent1_all_syntatic_corr_rtavg': '1936.000',
 'sent1_all_syntatic_corr_rtsd': '229.103',
 'sent1_all_syntatic_omit': '7',
 'sent1_all_syntatic_tot': '15',
 'sent1_all_truesent_acc': '52.809',
 'sent1_all_truesent_comit': '11',
 'sent1_all_truesent_corr_rtavg': '1429.766',
 'sent1_all_truesent_corr_rtsd': '546.103',
 'sent1_all_truesent_omit': '31',
 'sent1_all_truesent_tot': '89',
 'sent1_m1_all_acc': '56.000',
 'sent1_m1_all_comit': '9',
 'sent1_m1_all_corr_rtavg': '1643.286',
 'sent1_m1_all_corr_rtsd': '584.457',
 'sent1_m1_all_omit': '2',
 'sent1_m1_all_tot': '25',
 'sent1_m1_pseudo_acc': '66.667',
 'sent1_m1_pseudo_comit': '1',
 'sent1_m1_pseudo_corr_rtavg': '1441.500',
 'sent1_m1_pseudo_corr_rtsd': '9.192',
 'sent1_m1_pseudo_omit': '0',
 'sent1_m1_pseudo_tot': '3',
 'sent1_m1_realword_acc': '100.000',
 'sent1_m1_realword_comit': '0',
 'sent1_m1_realword_corr_rtavg': '2094.500',
 'sent1_m1_realword_corr_rtsd': '576.292',
 'sent1_m1_realword_omit': '0',
 'sent1_m1_realword_tot': '2',
 'sent1_m1_semantic_acc': '33.333',
 'sent1_m1_semantic_comit': '2',
 'sent1_m1_semantic_corr_rtavg': '2256.000',
 'sent1_m1_semantic_corr_rtsd': '0.000',
 'sent1_m1_semantic_omit': '0',
 'sent1_m1_semantic_tot': '3',
 'sent1_m1_syntatic_acc': '50.000',
 'sent1_m1_syntatic_comit': '1',
 'sent1_m1_syntatic_corr_rtavg': '1774.000',
 'sent1_m1_syntatic_corr_rtsd': '0.000',
 'sent1_m1_syntatic_omit': '0',
 'sent1_m1_syntatic_tot': '2',
 'sent1_m1_truesent_acc': '53.333',
 'sent1_m1_truesent_comit': '5',
 'sent1_m1_truesent_corr_rtavg': '1488.000',
 'sent1_m1_truesent_corr_rtsd': '658.401',
 'sent1_m1_truesent_omit': '2',
 'sent1_m1_truesent_tot': '15',
 'sent1_m2_all_acc': '68.000',
 'sent1_m2_all_comit': '4',
 'sent1_m2_all_corr_rtavg': '1439.353',
 'sent1_m2_all_corr_rtsd': '543.739',
 'sent1_m2_all_omit': '4',
 'sent1_m2_all_tot': '25',
 'sent1_m2_pseudo_acc': '100.000',
 'sent1_m2_pseudo_comit': '0',
 'sent1_m2_pseudo_corr_rtavg': '1406.000',
 'sent1_m2_pseudo_corr_rtsd': '170.009',
 'sent1_m2_pseudo_omit': '0',
 'sent1_m2_pseudo_tot': '3',
 'sent1_m2_realword_acc': '50.000',
 'sent1_m2_realword_comit': '0',
 'sent1_m2_realword_corr_rtavg': '1918.000',
 'sent1_m2_realword_corr_rtsd': '0.000',
 'sent1_m2_realword_omit': '1',
 'sent1_m2_realword_tot': '2',
 'sent1_m2_semantic_acc': '50.000',
 'sent1_m2_semantic_comit': '1',
 'sent1_m2_semantic_corr_rtavg': '1069.000',
 'sent1_m2_semantic_corr_rtsd': '0.000',
 'sent1_m2_semantic_omit': '0',
 'sent1_m2_semantic_tot': '2',
 'sent1_m2_syntatic_acc': '33.333',
 'sent1_m2_syntatic_comit': '2',
 'sent1_m2_syntatic_corr_rtavg': '2098.000',
 'sent1_m2_syntatic_corr_rtsd': '0.000',
 'sent1_m2_syntatic_omit': '0',
 'sent1_m2_syntatic_tot': '3',
 'sent1_m2_truesent_acc': '73.333',
 'sent1_m2_truesent_comit': '1',
 'sent1_m2_truesent_corr_rtavg': '1378.727',
 'sent1_m2_truesent_corr_rtsd': '618.771',
 'sent1_m2_truesent_omit': '3',
 'sent1_m2_truesent_tot': '15',
 'sent1_m3_all_acc': '52.000',
 'sent1_m3_all_comit': '5',
 'sent1_m3_all_corr_rtavg': '1491.846',
 'sent1_m3_all_corr_rtsd': '426.480',
 'sent1_m3_all_omit': '7',
 'sent1_m3_all_tot': '25',
 'sent1_m3_pseudo_acc': '33.333',
 'sent1_m3_pseudo_comit': '1',
 'sent1_m3_pseudo_corr_rtavg': '2074.000',
 'sent1_m3_pseudo_corr_rtsd': '0.000',
 'sent1_m3_pseudo_omit': '1',
 'sent1_m3_pseudo_tot': '3',
 'sent1_m3_realword_acc': '100.000',
 'sent1_m3_realword_comit': '0',
 'sent1_m3_realword_corr_rtavg': '1359.500',
 'sent1_m3_realword_corr_rtsd': '126.572',
 'sent1_m3_realword_omit': '0',
 'sent1_m3_realword_tot': '2',
 'sent1_m3_semantic_acc': '50.000',
 'sent1_m3_semantic_comit': '0',
 'sent1_m3_semantic_corr_rtavg': '823.000',
 'sent1_m3_semantic_corr_rtsd': '0.000',
 'sent1_m3_semantic_omit': '1',
 'sent1_m3_semantic_tot': '2',
 'sent1_m3_syntatic_acc': '0.000',
 'sent1_m3_syntatic_comit': '2',
 'sent1_m3_syntatic_corr_rtavg': '-1.000',
 'sent1_m3_syntatic_corr_rtsd': '0.000',
 'sent1_m3_syntatic_omit': '1',
 'sent1_m3_syntatic_tot': '3',
 'sent1_m3_truesent_acc': '60.000',
 'sent1_m3_truesent_comit': '2',
 'sent1_m3_truesent_corr_rtavg': '1530.889',
 'sent1_m3_truesent_corr_rtsd': '407.981',
 'sent1_m3_truesent_omit': '4',
 'sent1_m3_truesent_tot': '15',
 'sent1_m4_all_acc': '28.000',
 'sent1_m4_all_comit': '4',
 'sent1_m4_all_corr_rtavg': '1309.000',
 'sent1_m4_all_corr_rtsd': '481.493',
 'sent1_m4_all_omit': '14',
 'sent1_m4_all_tot': '25',
 'sent1_m4_pseudo_acc': '50.000',
 'sent1_m4_pseudo_comit': '1',
 'sent1_m4_pseudo_corr_rtavg': '1931.000',
 'sent1_m4_pseudo_corr_rtsd': '0.000',
 'sent1_m4_pseudo_omit': '0',
 'sent1_m4_pseudo_tot': '2',
 'sent1_m4_realword_acc': '0.000',
 'sent1_m4_realword_comit': '0',
 'sent1_m4_realword_corr_rtavg': '-1.000',
 'sent1_m4_realword_corr_rtsd': '0.000',
 'sent1_m4_realword_omit': '3',
 'sent1_m4_realword_tot': '3',
 'sent1_m4_semantic_acc': '0.000',
 'sent1_m4_semantic_comit': '1',
 'sent1_m4_semantic_corr_rtavg': '-1.000',
 'sent1_m4_semantic_corr_rtsd': '0.000',
 'sent1_m4_semantic_omit': '2',
 'sent1_m4_semantic_tot': '3',
 'sent1_m4_syntatic_acc': '0.000',
 'sent1_m4_syntatic_comit': '1',
 'sent1_m4_syntatic_corr_rtavg': '-1.000',
 'sent1_m4_syntatic_corr_rtsd': '0.000',
 'sent1_m4_syntatic_omit': '1',
 'sent1_m4_syntatic_tot': '2',
 'sent1_m4_truesent_acc': '40.000',
 'sent1_m4_truesent_comit': '1',
 'sent1_m4_truesent_corr_rtavg': '1205.333',
 'sent1_m4_truesent_corr_rtsd': '433.509',
 'sent1_m4_truesent_omit': '8',
 'sent1_m4_truesent_tot': '15',
 'sent1_m5_all_acc': '41.667',
 'sent1_m5_all_comit': '3',
 'sent1_m5_all_corr_rtavg': '1517.100',
 'sent1_m5_all_corr_rtsd': '508.648',
 'sent1_m5_all_omit': '11',
 'sent1_m5_all_tot': '24',
 'sent1_m5_pseudo_acc': '50.000',
 'sent1_m5_pseudo_comit': '1',
 'sent1_m5_pseudo_corr_rtavg': '2034.000',
 'sent1_m5_pseudo_corr_rtsd': '0.000',
 'sent1_m5_pseudo_omit': '0',
 'sent1_m5_pseudo_tot': '2',
 'sent1_m5_realword_acc': '66.667',
 'sent1_m5_realword_comit': '1',
 'sent1_m5_realword_corr_rtavg': '1474.000',
 'sent1_m5_realword_corr_rtsd': '319.612',
 'sent1_m5_realword_omit': '0',
 'sent1_m5_realword_tot': '3',
 'sent1_m5_semantic_acc': '0.000',
 'sent1_m5_semantic_comit': '0',
 'sent1_m5_semantic_corr_rtavg': '-1.000',
 'sent1_m5_semantic_corr_rtsd': '0.000',
 'sent1_m5_semantic_omit': '2',
 'sent1_m5_semantic_tot': '2',
 'sent1_m5_syntatic_acc': '0.000',
 'sent1_m5_syntatic_comit': '0',
 'sent1_m5_syntatic_corr_rtavg': '-1.000',
 'sent1_m5_syntatic_corr_rtsd': '0.000',
 'sent1_m5_syntatic_omit': '3',
 'sent1_m5_syntatic_tot': '3',
 'sent1_m5_truesent_acc': '50.000',
 'sent1_m5_truesent_comit': '1',
 'sent1_m5_truesent_corr_rtavg': '1455.571',
 'sent1_m5_truesent_corr_rtsd': '567.003',
 'sent1_m5_truesent_omit': '6',
 'sent1_m5_truesent_tot': '14',
 'sent1_m6_all_acc': '32.000',
 'sent1_m6_all_comit': '3',
 'sent1_m6_all_corr_rtavg': '1414.625',
 'sent1_m6_all_corr_rtsd': '580.694',
 'sent1_m6_all_omit': '14',
 'sent1_m6_all_tot': '25',
 'sent1_m6_pseudo_acc': '50.000',
 'sent1_m6_pseudo_comit': '1',
 'sent1_m6_pseudo_corr_rtavg': '1035.000',
 'sent1_m6_pseudo_corr_rtsd': '0.000',
 'sent1_m6_pseudo_omit': '0',
 'sent1_m6_pseudo_tot': '2',
 'sent1_m6_realword_acc': '0.000',
 'sent1_m6_realword_comit': '1',
 'sent1_m6_realword_corr_rtavg': '-1.000',
 'sent1_m6_realword_corr_rtsd': '0.000',
 'sent1_m6_realword_omit': '2',
 'sent1_m6_realword_tot': '3',
 'sent1_m6_semantic_acc': '33.333',
 'sent1_m6_semantic_comit': '0',
 'sent1_m6_semantic_corr_rtavg': '1352.000',
 'sent1_m6_semantic_corr_rtsd': '0.000',
 'sent1_m6_semantic_omit': '2',
 'sent1_m6_semantic_tot': '3',
 'sent1_m6_syntatic_acc': '0.000',
 'sent1_m6_syntatic_comit': '0',
 'sent1_m6_syntatic_corr_rtavg': '-1.000',
 'sent1_m6_syntatic_corr_rtsd': '0.000',
 'sent1_m6_syntatic_omit': '2',
 'sent1_m6_syntatic_tot': '2',
 'sent1_m6_truesent_acc': '40.000',
 'sent1_m6_truesent_comit': '1',
 'sent1_m6_truesent_corr_rtavg': '1488.333',
 'sent1_m6_truesent_corr_rtsd': '660.273',
 'sent1_m6_truesent_omit': '8',
 'sent1_m6_truesent_tot': '15',
 'sent1_upload': 'yes'}
        data = parse(f)
        self.assertEqual(data, correct, "Failed parsing LDRC1 SENT")

